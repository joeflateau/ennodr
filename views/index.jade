extends layout

block content
  style.
    #console { word-wrap:break-word;}
  h1= title
  select(data-bind="options: tracks, optionsText: 'label', value: activeTrack, allowUnset: true")
  canvas#myCanvas
block scripts
  script(src="/socket.io/socket.io.js")
  script.
    function ViewModel(){
        this.tracks = ko.observableArray();
        this.activeTrack = ko.observable();
    }
    var vm = new ViewModel();
    
    ko.applyBindings(vm);

    var socket = io.connect('/');
    var canvas = document.getElementById("myCanvas");
    
    var getUserMedia =  function() {
     (navigator.webkitGetUserMedia || navigator.mozGetUserMedia).apply(navigator, arguments);
    };

    getUserMedia({ video:true }, function(stream){
        vm.tracks(stream.getVideoTracks());
    }, function(err) { console.error(err); });

    var source,
        video;

    ko.computed(function(){
        var track = ko.unwrap(vm.activeTrack);

        if (!track) return;

        if (source && video){
            video.src = null;
            source.stop();
        }

        getUserMedia({ video: { optional : [ {sourceId: track.id } ] } }, function(stream){
                video = document.createElement('video');
                video.autoplay = true;
                video.src = window.URL.createObjectURL(stream);
                video.addEventListener('play', function(){
                    draw(video, canvas.getContext('2d'), video.videoWidth, video.videoHeight);
                    });
            }, function(err){ console.error(err); });
    });


    function draw (video, context, w, h){
        if(video.paused || video.ended) return false;
        canvas.width = video.width = video.videoWidth;
        canvas.height = video.height = video.videoHeight;
        context.drawImage(video, 0, 0, w, h);
        var url = canvas.toDataURL('image/jpeg', 0.3);
        var b64 = url.split(";base64,")[1];
        socket.emit('frame', b64);
        requestAnimationFrame(function(){
            draw(video, context, w, h);
            });
    }